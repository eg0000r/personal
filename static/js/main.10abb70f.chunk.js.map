{"version":3,"sources":["logo.svg","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","Component","Home","src","alt","width","height","className","LogInWidget","MenuBarButton","this","props","active","text","onClick","handle","value","MenuBar","pageContent","state","page","buttonHandler","e","setState","one","two","three","four","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,kC,mHCGrCC,G,4LAEE,OACI,6BACI,6BACA,8BACI,uCACA,gCACA,0CACA,6BACA,6CACA,sC,GAXAC,cA+BLC,E,iLAXP,OACI,6BACI,oCACA,yBAAKC,IAAK,+DAAgEC,IAAK,QAASC,MAAO,MAAOC,OAAQ,QAC9G,yBAAKC,UAAW,eAChB,kBAAC,EAAD,W,GAPGN,aCfbO,E,iLAEF,OACI,yBAAKD,UAAW,qBACd,yBAAKA,UAAW,sB,GAJAN,aAYpBQ,E,iLAEF,OAAIC,KAAKC,MAAMC,OAET,6BACE,4BAAQL,UAAW,mBAAoBG,KAAKC,MAAME,OAKtD,6BACE,4BAAQC,QAASJ,KAAKC,MAAMI,OAAQC,MAAON,KAAKC,MAAMK,MAAOT,UAAW,YAAaG,KAAKC,MAAME,W,GAX9EZ,aAiBtBgB,E,YACJ,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KASRO,YAAc,WACZ,MAAwB,SAApB,EAAKC,MAAMC,KAET,kBAAC,EAAD,MAGC,MAhBU,EAkBnBC,cAAgB,SAACC,GAQf,OAPA,EAAKC,SAAS,CACZC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,MAAM,IAGAL,EAAEM,OAAOZ,OACf,IAAK,IACH,EAAKO,SAAS,CAACC,KAAK,EAAMJ,KAAM,SAChC,MACF,IAAK,IACH,EAAKG,SAAS,CAACE,KAAK,EAAML,KAAM,QAChC,MACF,IAAK,IACH,EAAKG,SAAS,CAACG,OAAO,EAAMN,KAAM,UAClC,MACF,IAAK,IACH,EAAKG,SAAS,CAACI,MAAM,EAAMP,KAAM,WAnCrC,EAAKD,MAAQ,CACXK,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNP,KAAM,QAPS,E,sEA0CjB,OACI,6BACE,yBAAKb,UAAW,iBACd,yBAAKA,UAAW,YACd,kBAAC,EAAD,CAAeQ,OAAQL,KAAKW,cAAeL,MAAO,IAAKJ,OAAQF,KAAKS,MAAMK,IAAKX,KAAM,SACrF,kBAAC,EAAD,CAAeE,OAAQL,KAAKW,cAAeL,MAAO,IAAKJ,OAAQF,KAAKS,MAAMM,IAAKZ,KAAM,QACrF,kBAAC,EAAD,CAAeE,OAAQL,KAAKW,cAAeL,MAAO,IAAKJ,OAAQF,KAAKS,MAAMO,MAAOb,KAAM,UACvF,kBAAC,EAAD,CAAeE,OAAQL,KAAKW,cAAeL,MAAO,IAAKJ,OAAQF,KAAKS,MAAMQ,KAAMd,KAAM,SACtF,kBAAC,EAAD,QAGHH,KAAKQ,mB,GAtDMjB,aAsEP4B,MAVf,WACE,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCvFYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10abb70f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nclass Login extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <hr/>\r\n                <form>\r\n                    <label>Id: </label>\r\n                    <input/>\r\n                    <button>Log in</button>\r\n                    <br/>\r\n                    <label>Password: </label>\r\n                    <input/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Home extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Home</h1>\r\n                <img src={'https://cdn.auth0.com/blog/react-splash-screen/react-app.png'} alt={'Image'} width={'200'} height={'100'}/>\r\n                <div className={'home-image'}/>\r\n                <Login/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './Home'\nimport Home from \"./Home\";\n\nclass LogInWidget extends Component{\n  render() {\n    return (\n        <div className={'login-widget-root'}>\n          <div className={'login-widget'}>\n\n          </div>\n        </div>\n    )\n  }\n}\n\nclass MenuBarButton extends Component{\n  render() {\n    if (this.props.active) {\n      return (\n          <div>\n            <button className={'menu-bar-active'}>{this.props.text}</button>\n          </div>\n      )\n    }\n    return (\n        <div>\n          <button onClick={this.props.handle} value={this.props.value} className={'menu-bar'}>{this.props.text}</button>\n        </div>\n    )\n  }\n}\n\nclass MenuBar extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      one: true,\n      two: false,\n      three: false,\n      four: false,\n      page: 'home',\n    }\n  }\n  pageContent = () => {\n    if (this.state.page === 'home') {\n      return (\n          <Home/>\n      )\n    }\n    return null;\n  };\n  buttonHandler = (e) => {\n    this.setState({\n      one: false,\n      two: false,\n      three: false,\n      four: false,\n    });\n    // eslint-disable-next-line default-case\n    switch (e.target.value) {\n      case '1':\n        this.setState({one: true, page: 'home'});\n        break;\n      case '2':\n        this.setState({two: true, page: 'two'});\n        break;\n      case '3':\n        this.setState({three: true, page: 'three'});\n        break;\n      case '4':\n        this.setState({four: true, page: 'four'});\n        break;\n    }\n  };\n  render() {\n    return (\n        <div>\n          <div className={'menu-bar-root'}>\n            <div className={'menu-bar'}>\n              <MenuBarButton handle={this.buttonHandler} value={'1'} active={this.state.one} text={'Home'}/>\n              <MenuBarButton handle={this.buttonHandler} value={'2'} active={this.state.two} text={'Two'}/>\n              <MenuBarButton handle={this.buttonHandler} value={'3'} active={this.state.three} text={'Three'}/>\n              <MenuBarButton handle={this.buttonHandler} value={'4'} active={this.state.four} text={'Four'}/>\n              <LogInWidget/>\n            </div>\n          </div>\n          {this.pageContent()}\n        </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MenuBar/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}